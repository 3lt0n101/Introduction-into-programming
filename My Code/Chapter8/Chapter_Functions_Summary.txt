
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ“˜ Chapter Summary: JavaScript Functions
(Reference: JavaScript for Kids + JavaScript for Dummies)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

ðŸ”¹ What is a Function?
A function is a block of reusable code that performs a specific task when called.

ðŸ”¹ Defining a Function:
Syntax:
function functionName(parameters) {
    // code to execute
}

Example:
function greet(name) {
    console.log("Hello, " + name);
}

ðŸ”¹ Calling a Function:
greet("Ghosth0wl");

ðŸ”¹ Parameters vs Arguments:
- Parameters: placeholders in the function definition.
- Arguments: actual values passed to the function when it's called.

ðŸ”¹ Return Values:
Functions can send data back using the return keyword.

Example:
function add(x, y) {
    return x + y;
}
let result = add(4, 5); // result = 9

ðŸ”¹ Anonymous Functions:
Functions without a name, stored in variables.

let sayHi = function() {
    console.log("Hi!");
};

ðŸ”¹ Arrow Functions (ES6+):
Shortcut way to write functions.

let square = (x) => x * x;

ðŸ”¹ Scope:
- Local scope: inside function.
- Global scope: outside all functions.

ðŸ”¹ Default Parameters:
function greet(name = "stranger") {
    console.log("Hi " + name);
}

ðŸ”¹ Nested Functions:
You can define one function inside another.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ… Use functions to keep code DRY (Donâ€™t Repeat Yourself)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
